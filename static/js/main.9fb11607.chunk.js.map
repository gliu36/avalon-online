{"version":3,"sources":["components/Game/Avalon.js","components/Lobby.js","components/Welcome.js","serviceWorker.js","index.js"],"names":["Avalon","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","players","list","globalTurnCounter","react_default","a","createElement","Component","Lobby","updateCodeFromSockets","payload","setState","createPlayer","item","key","text","goToGameScreen","gameScreen","socket","io","connect","_this2","username","emit","on","test","map","i","className","onClick","backToMenu","Avalon_Avalon","App","handleNewGame","e","preventDefault","console","log","concat","goToLobby","handleOldGame","lobby_id","handleName","target","value","handleLobby","newGame","enterNewNameVisable","enterLobbyVisable","joinGame","enterOldNameVisable","lobby","data","showNewName","showOldName","components_Lobby","id","onSubmit","autoComplete","type","name","onChange","Boolean","window","location","hostname","match","ReactDOM","render","components_Welcome","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fb11607.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Avalon extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            players: this.props.list,\r\n            globalTurnCounter: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Game\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Avalon from './Game/Avalon.js';\r\nimport '../styles/Lobby/Lobby.css';\r\nimport io from 'socket.io-client'\r\nimport { stat } from 'fs';\r\n\r\n\r\nclass Lobby extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            list: [],\r\n            gameScreen: false\r\n        };\r\n\r\n        this.socket = io.connect(\"https://gliu36.github.io/avalon-online/:8080\");\r\n\r\n        \r\n    }\r\n\r\n    updateCodeFromSockets = (payload) => {\r\n        this.setState((state) => ({\r\n            list: payload\r\n        }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        var newItem = {\r\n            text: this.props.username,\r\n            key: 'fuck'\r\n        };\r\n        // this.setState((prevState) => {\r\n        //     return {\r\n        //         list: prevState.list.push('newItem')\r\n        //     }\r\n        // });\r\n        this.socket.emit('room', 'gerry', this.props.username, 1);\r\n        this.socket.on('message', (payload) => {\r\n            this.updateCodeFromSockets(payload);\r\n        });\r\n\r\n    }\r\n\r\n    createPlayer = (item) => {\r\n        return <li key={item.key}> {item.text} </li>\r\n    }\r\n     \r\n\r\n    goToGameScreen = () => {\r\n        this.setState({ gameScreen: true })\r\n    }\r\n\r\n    render() {\r\n        \r\n        var test = this.state.list.map((item,i) => <li key={i}>{item}</li>);\r\n        // var listItems = this.state.list.map((item) =>\r\n        // {   return <li key={item.key}> {item.text} </li>   });\r\n      \r\n        \r\n\r\n        return (\r\n            <div>\r\n                {!this.state.gameScreen && <div className=\"Lobby\">\r\n                    <h1 className=\"RoomTitle\"> Room number #</h1>\r\n                    <p>Current Player in Lobby</p>\r\n                    <ol className=\"playerList\">{test}</ol>\r\n\r\n                    <button className=\"btn2\" onClick={this.props.backToMenu}>Quit</button>\r\n                    <button className=\"btn2\" onClick={this.goToGameScreen}>Start Game</button>\r\n\r\n                    \r\n                </div>}\r\n                {this.state.gameScreen &&\r\n                        <div className = \"lobby\">\r\n                            <Avalon players={this.state.list}/>\r\n                        </div>\r\n                    }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lobby;","import React, { Component } from 'react';\r\nimport '../styles/Welcome/Welcome.scss';\r\nimport io from 'socket.io-client'\r\nimport Lobby from './Lobby'\r\n//import io from 'socket.io-client'\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      data: null,\r\n      enterNewNameVisable: false,\r\n      enterOldNameVisable: false,\r\n      enterLobbyVisable: false,\r\n      lobby: false,\r\n      username: \"\",\r\n      lobby_id: \"random_value\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n   // const socket = io(\"http://localhost:5000\");\r\n    /*  this.callBackendAPI()\r\n      .then(res => this.setState({data: res.express }))\r\n      .catch(err => console.log(err));\r\n      \r\n\r\n  }\r\n\r\n  callBackendAPI =  async() => {\r\n    const response = await fetch('/express_backend');\r\n    const body = await response.json();\r\n  } */\r\n\r\n  handleNewGame = (e) => {\r\n    e.preventDefault();\r\n\r\n    let username = this.state.username;  // This is form username\r\n    let lobby_id = \"random\";  // This is form lobby id\r\n\r\n    console.log(`User Name is: ${username}; LobbyID is: ${lobby_id}`);\r\n\r\n    // var socket = io.connect(\"http://localhost:8080\");\r\n    //   socket.emit('room', \"gerry\", 1);\r\n    //   socket.on('message', function(data) {\r\n    //     console.log(data);\r\n    //   });\r\n      this.setState({ username: username }, this.goToLobby);\r\n      //console.log(`User Name is: ${username}`)\r\n  }\r\n\r\n  handleOldGame = (e) => {\r\n    e.preventDefault();\r\n\r\n    let username = this.state.username;  // This is form username\r\n    let lobby_id = this.state.lobby_id;  // This is form lobby id\r\n\r\n    console.log(`User Name is: ${username}; LobbyID is: ${lobby_id}`);\r\n\r\n    // var socket = io.connect(\"http://localhost:8080\");\r\n    //   socket.emit('room', \"gerry\", 0);\r\n    //   socket.on('message', function(data) {\r\n    //     console.log(data);\r\n    //   });\r\n\r\n      this.setState({ username: username, lobby_id: lobby_id }, this.goToLobby);\r\n    \r\n  }\r\n\r\n  handleName = (e) => {this.setState({username: e.target.value})}\r\n  handleLobby = (e) => {this.setState({lobby_id: e.target.value});}\r\n\r\n\r\n  newGame = () => {\r\n    this.setState({ enterNewNameVisable: true, enterLobbyVisable: false});\r\n  }\r\n\r\n  joinGame = () => {\r\n    this.setState({\r\n      enterOldNameVisable: true,\r\n      enterLobbyVisable: true\r\n    });\r\n  }\r\n\r\n  backToMenu = () => {\r\n    this.setState({ enterNewNameVisable: false, enterOldNameVisable: false, enterLobbyVisable: false, lobby: false });\r\n  }\r\n\r\n  goToLobby = () => {\r\n    this.setState({ lobby: true });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    let showNewName = this.state.enterNewNameVisable;\r\n    let showOldName = this.state.enterOldNameVisable;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        {this.state.lobby &&\r\n        // Lobby Here\r\n          <div className = \"lobby\">\r\n            <Lobby username={this.state.username}\r\n                  backToMenu={this.backToMenu}\r\n            />\r\n          </div>\r\n        }\r\n        \r\n        {!this.state.lobby && <div className=\"btn-container\">\r\n        <p className=\"title\">Avalon Online</p>\r\n          <div>\r\n            {!showNewName && !showOldName && <button className=\"btn\" onClick={this.newGame}>New Game</button>}\r\n            {!showNewName && !showOldName && <button className=\"btn\" onClick={this.joinGame}>Join Game</button>}\r\n            \r\n            {showNewName && \r\n            <div>\r\n              <form id=\"newgame\" onSubmit={this.handleNewGame} autoComplete=\"off\">\r\n                <p>Enter a Name:</p>\r\n                <input className=\"joinRoom\" type=\"text\" name=\"username\" onChange={this.handleName}></input>\r\n                <button className=\"submit\" type=\"submit\">Submit</button>\r\n              </form>\r\n              <button className=\"btn\" onClick={this.backToMenu}>Back</button>\r\n              <button className=\"btn\" onClick={this.goToLobby}>Go to Lobby</button>\r\n            </div>}\r\n\r\n            {showOldName && \r\n            <div>\r\n              <form id=\"oldgame\" onSubmit={this.handleOldGame} autoComplete=\"off\">\r\n                <p>Enter a Name:</p>\r\n                <input className=\"joinRoom\" type=\"text\" name=\"username\" onChange={this.handleName}></input>\r\n                <p>Enter Lobby ID:</p>\r\n                <input className=\"joinRoom\" type=\"text\" name=\"lobby_id\" onChange={this.handleLobby}></input>\r\n                <button className=\"submit\" type=\"submit\">Submit</button>\r\n              </form>\r\n              <button className=\"btn\" onClick={this.backToMenu}>Back</button>\r\n            </div>}\r\n          </div>\r\n        </div>}\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Welcome from './components/Welcome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Welcome />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}